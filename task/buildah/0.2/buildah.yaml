---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
  annotations:
    tags: image-build
    version: "0.2"
spec:
  description: >
    Buildah task builds source into a container image and
    then pushes it to a container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.

  params:
    - name: IMAGE
      description: Reference of the image buildah will produce.
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.11.0
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: Path to the directory to use as context.
      default: .
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
    - name: FORMAT
      description: The format of the built container, oci or docker
      default: "oci"
  workspaces:
    - name: source

  steps:
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      command:
        [
          "buildah",
          "bud",
          "--format=$(params.FORMAT)",
          "--tls-verify=$(params.TLSVERIFY)",
          "--layers",
          "-f",
          "$(params.DOCKERFILE)",
          "-t",
          "$(params.IMAGE)",
          "$(params.CONTEXT)",
        ]
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true

    - name: push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      command:
        [
          "buildah",
          "push",
          "--tls-verify=$(params.TLSVERIFY)",
          "$(params.IMAGE)",
          "docker://$(params.IMAGE)",
        ]
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true

  volumes:
    - name: varlibcontainers
      emptyDir: {}
